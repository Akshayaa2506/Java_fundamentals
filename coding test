HELP DESK:

enum Category {
    SOFTWARE, HARDWARE;
}

class Employee {
    String fullName;
    int pointLevel;
    Category assignedCategory;
    public Employee(String fullName, int pointLevel, Category assignedCategory) {
        this.fullName = fullName;
        this.pointLevel = pointLevel;
        this.assignedCategory = assignedCategory;
    }
}

class Ticket {
    int id;
    String name;
    Category category;
    int point;
    String assignedEmployee="";
    boolean isCompleted=false;

    public Ticket(int id, String name, Category category, int point) {
        this.id = id;
        this.name = name;
        this.category = category;
        this.point = point;
    }
}

class HelpDesk {
    Employee emp1, emp2;
    Ticket[] tickets = new Ticket[5];

    void addEmployee(Employee e, int pos) {
        if (pos == 1) {
            emp1 = e;
        }
       else{
        emp2 = e;
       }

    }

    void addTicket(Ticket t, int pos) {
        if (pos >= 1 && pos <= 5) {
            tickets[pos - 1] = t;
        }
    }

    void completeTicket(String employeeName, int ticketId) {
        Employee emp = null;

      if (emp1 != null && emp1.fullName.equals(employeeName)) {
           emp = emp1;
       } else if (emp2 != null && emp2.fullName.equals(employeeName)) {
          emp = emp2;
      }


        if (emp == null) return;

        for (Ticket t : tickets) {
            if (t != null && t.id == ticketId && !t.isCompleted) {
                if (emp.pointLevel >= t.point) {
                    t.isCompleted = true;
                    t.assignedEmployee = emp.fullName;
                    System.out.println("Ticket " + t.id + " marked as completed by " + emp.fullName + ".");
                } else {
                    System.out.println("Ticket " + t.id + " cannot be completed by " + emp.fullName + " (Insufficient points).");
                }
                return;
            }
        }
    }

    int getWaitingTicketCount() {
        int count = 0;
        for (Ticket t : tickets) {
            if (t != null && !t.isCompleted)
            {
                 count++;
            }
        }
        return count;
    }

    int getCompletedTicketsTotalPoint() {
        int sum = 0;
        for (Ticket t : tickets) {
            if (t != null && t.isCompleted) sum += t.point;
        }
        return sum;
    }
}

public class HelpDeskMan{
    public static void main(String[] args) {
        HelpDesk helpDesk = new HelpDesk();
        Employee alice = new Employee("Alice", 5, Category.SOFTWARE);
        Employee bob = new Employee("jose", 8, Category.HARDWARE);
        helpDesk.addEmployee(alice, 1);
        helpDesk.addEmployee(jose, 2);

        Ticket t1 = new Ticket(101, "Software Bug", Category.SOFTWARE, 4);
        Ticket t2 = new Ticket(102, "Network Issue", Category.HARDWARE, 7);
        Ticket t3 = new Ticket(103, "System Crash", Category.HARDWARE, 10);
        Ticket t4 = new Ticket(104, "Printer Not Working", Category.HARDWARE, 3);
        Ticket t5 = new Ticket(105, "UI Bug", Category.SOFTWARE, 2);
        helpDesk.addTicket(t1, 1);
        helpDesk.addTicket(t2, 2);
        helpDesk.addTicket(t3, 3);
        helpDesk.addTicket(t4, 4);
        helpDesk.addTicket(t5, 5);

        helpDesk.completeTicket("ramya", 101);
        helpDesk.completeTicket("rosy", 102);
        helpDesk.completeTicket("mithra", 103);
        helpDesk.completeTicket("jose", 104);
        helpDesk.completeTicket("Alice", 105);

        System.out.println(helpDesk.getWaitingTicketCount());
        System.out.println(helpDesk.getCompletedTicketsTotalPoint());
    }
}

BANK:

abstract class BankAccount {
    String accountNumber;
    double balance;

    public BankAccount(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited " + amount + ", New balance: " + balance);
    }
    abstract boolean withdraw(double amount);
    public double getBalance() {
        return balance;
    }
}

interface Transaction {
    boolean transfer(BankAccount toAccount, double amount);
}

class SavingsAccount extends BankAccount implements Transaction {
    public SavingsAccount(String accountNumber, double balance) {
        super(accountNumber, balance);
    }

    @Override
    boolean withdraw(double amount) {
        if (balance - amount >= 500) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful, new balance: " + balance);
            return true;
        }
        System.out.println("Withdrawal failed, minimum 500 balance required.");
        return false;
    }

    @Override
    public boolean transfer(BankAccount toAccount, double amount) {
        if (withdraw(amount)) {
            toAccount.deposit(amount);
            System.out.println("Transfer of " + amount + " successful. New savings balance: " + balance +
                    ", New target account balance: " + toAccount.getBalance());
            return true;
        }
        return false;
    }
}

class CurrentAccount extends BankAccount implements Transaction {
    private static final double OVERDRAFT_LIMIT = -5000;

    public CurrentAccount(String accountNumber, double balance) {
        super(accountNumber, balance);
    }

    @Override
    boolean withdraw(double amount) {
        if (balance - amount >= OVERDRAFT_LIMIT) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful, new balance: " + balance);
            return true;
        }
        System.out.println("Withdrawal failed, overdraft limit exceeded.");
        return false;
    }

    @Override
    public boolean transfer(BankAccount toAccount, double amount) {
        if (withdraw(amount)) {
            toAccount.deposit(amount);
            System.out.println("Transfer of " + amount + " successful. New current balance: " + balance +
                    ", New target account balance: " + toAccount.getBalance());
            return true;
        }
        return false;
    }
}

FIBONACCI:

import java.util.Scanner;

public class fibbanocci {
    
    public static int fibonacci(int n) {
        if (n <= 1) {
            return n; 
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2); 
        }
    }
    
    public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       int n=sc.nextInt();
       for (int i = 0; i < n; i++) {
        System.out.print(fibonacci(i) + " ");
    }
    }
}

MATRIX:

import java.util.Arrays;

public class matrix {
    public static int[][] addMatrices(int[][] A, int[][] B) {
        int rows = A.length, cols = A[0].length;
        int[][] C = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                C[i][j] = A[i][j] + B[i][j];
            }
        }
        return C;
    }

    public static void main(String[] args) {
        int[][] A = {{1, 2}, {3, 4}};
        int[][] B = {{5, 6}, {7, 8}};

        int[][] C = addMatrices(A, B);
        for (int[] row : C) {
            System.out.println(Arrays.toString(row));
        }
       
    }
}
